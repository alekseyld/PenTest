using System;
using System.Collections.Generic;
using System.Windows.Forms;
using System.IO.Ports;
using System.Timers;

namespace PenTest
{
    public partial class Form1 : Form
    {
        private Question currentTest;
        public Question CurrentTest
        {
            set
            {
                currentTest = value;

                lblPortData.Invoke(new updateDelegate(updateTextBox), lblPortData, currentTest.title);
                button1.Invoke(new updateDelegate(updateTextBox), button1, currentTest.answers[0]);
                button2.Invoke(new updateDelegate(updateTextBox), button2, currentTest.answers[1]);
                button3.Invoke(new updateDelegate(updateTextBox), button3, currentTest.answers[2]);
                button4.Invoke(new updateDelegate(updateTextBox), button4, currentTest.answers[3]);

                lblPortData.Invoke(new visibleDelegate(visibleControl), lblPortData, true);
                tableLayoutPanel1.Invoke(new visibleDelegate(visibleControl), tableLayoutPanel1, true);
                progressBar1.Invoke(new visibleDelegate(visibleControl), progressBar1, false);
                infoLoading.Invoke(new visibleDelegate(visibleControl), infoLoading, false);
            }
            get
            {
                return currentTest;
            }
        }

        List<Question> test;

        Random rnd = new Random();

        //System.Timers.Timer aTimer;
        SerialPort currentPort;
        private delegate void updateDelegate(Control c, string txt);
        private delegate void visibleDelegate(Control c, bool visible);

        public Form1()
        {
            InitializeComponent();
        }

        private void button1_Click(object sender, EventArgs e)
        {
            CheckAnswer(1);
        }

        private void button2_Click(object sender, EventArgs e)
        {
            CheckAnswer(2);
        }

        private void button3_Click(object sender, EventArgs e)
        {
            CheckAnswer(3);
        }

        private void button4_Click(object sender, EventArgs e)
        {
            CheckAnswer(4);
        }

        private void CheckAnswer(int answer)
        {
            if (answer == CurrentTest.currect)
            {
                CurrectAnswerEvent();
            } else
            {
                NonCurrectAnswerEvent();
            }
        }

        private void NonCurrectAnswerEvent()
        {
            MessageBox.Show("Ответ неверный. Через 10 секунд появится следующий вопрос", "Неверный ответ",
                MessageBoxButtons.OK, MessageBoxIcon.Warning);

            RandomTestWithLoading(10);
        }

        private void CurrectAnswerEvent()
        {
            SendCurrectAnswerEvent();

            MessageBox.Show("Ответ верный. Через 30 секунд появится следующий вопрос", "Правильный ответ",
                MessageBoxButtons.OK, MessageBoxIcon.Information);

            RandomTestWithLoading(30);
        }

        private void RandomTestWithLoading(int seconds)
        {
            lblPortData.Visible = false;
            tableLayoutPanel1.Visible = false;
            progressBar1.Visible = true;
            progressBar1.Style = ProgressBarStyle.Marquee;
            progressBar1.MarqueeAnimationSpeed = 50;
            infoLoading.Visible = true;

            RandomTest();

            System.Threading.Timer timer = null;
            timer = new System.Threading.Timer((obj) =>
            {
                RandomTest();
                timer.Dispose();
            },
                        null, seconds * 1000, System.Threading.Timeout.Infinite);
        }

        private void SendCurrectAnswerEvent() {
            //if (!currentPort.IsOpen) return;
            //currentPort.WriteLine("Player Win");
            WriteDataToCom("Player Win");
        }

        private void Window_Closing(object sender, EventArgs e)
        {
            //aTimer.Enabled = false;
            //currentPort.Close();
        }

        private void OnTimedEvent(object sender, ElapsedEventArgs e)
        {
            //if (!currentPort.IsOpen) return;
            //try // так как после закрытия окна таймер еще может выполнится или предел ожидания может быть превышен
            //{
            //    // удалим накопившееся в буфере
            //    currentPort.DiscardInBuffer();
            //    // считаем последнее значение 
            //    string strFromPort = currentPort.ReadLine();
            //    lblPortData.Invoke(new updateDelegate(updateTextBox), strFromPort);
            //}
            //catch (Exception e1) {

            //}
        }

        private void updateTextBox(Control c, string txt)
        {
            c.Text = txt;
        }

        private void visibleControl(Control c, bool visible)
        {
            c.Visible = visible;
        }

        //private bool ArduinoDetected()
        //{
        //    try
        //    {
        //        System.Threading.Thread.Sleep(1000);
        //        currentPort.Open();
        //        System.Threading.Thread.Sleep(1000);

        //        currentPort.DiscardInBuffer();
        //        currentPort.DiscardOutBuffer();

        //        currentPort.WriteLine("Info from Arduino");

        //        System.Threading.Thread.Sleep(1000);

        //        currentPort.ReadTimeout = 4000;

        //        string returnMessage = currentPort.ReadLine();
        //        currentPort.Close();

        //        if (returnMessage.Contains("Info from Arduino"))
        //        {
        //            return true;
        //        }
        //        else
        //        {
        //            return false;
        //        }
        //    }
        //    catch (Exception e)
        //    {
        //        return false;
        //    }
        //}

        public void LoadTestFromFile()
        {
            //string curFile = @".\test.json";

            //if (!File.Exists(curFile))
            //{
            //    MessageBox.Show("Не найден файл с тестом", "Ошибка",
            //           MessageBoxButtons.OK, MessageBoxIcon.Error);
            //    Environment.Exit(0);
            //}

            //using (StreamReader r = new StreamReader(curFile))
            //{
            //    string json = r.ReadToEnd();
            //    test = JsonConvert.DeserializeObject<List<Question>>(json);
            //}
            test = new List<Question>();
            Question q = new Question();
            List<string> a = new List<string>();
            a.Add("1");
            a.Add("2");
            a.Add("3");
            a.Add("4");
            q.answers = a;
            q.currect = 1;
            q.title = "title";
            test.Add(q);
        }

        //private bool FindArduino()
        //{
        //    bool ArduinoPortFound = false;

        //    try
        //    {
        //        string[] ports = SerialPort.GetPortNames();
        //        foreach (string port in ports)
        //        {
        //            currentPort = new SerialPort(port, 9600);
        //            if (ArduinoDetected())
        //            {
        //                ArduinoPortFound = true;
        //                break;
        //            }
        //            else
        //            {
        //                ArduinoPortFound = false;
        //            }
        //        }
        //    }
        //    catch { }

        //    return ArduinoPortFound;
        //}

        private void RandomTest()
        {
            int index = rnd.Next(0, test.Count - 1);
            CurrentTest = test[index];
        }

        private void WriteDataToCom(string data)
        {
            currentPort = new SerialPort("COM5", 9600);
            currentPort.BaudRate = 9600;
            currentPort.DtrEnable = true;
            currentPort.ReadTimeout = 3000;
            try
            {
                currentPort.Open();
            }
            catch (Exception e2)
            {
                MessageBox.Show("Ошибка при подключении к COM порту", "Ошибка",
                    MessageBoxButtons.OK, MessageBoxIcon.Error);
                Environment.Exit(0);
            }

            currentPort.WriteLine(data);

            currentPort.Close();
        }

        public void Init()
        {
            //bool ArduinoPortFound = FindArduino();

            //if (ArduinoPortFound == false)
            //{
            //    MessageBox.Show("Микроконтроллер не найден.", "Ошибка",
            //        MessageBoxButtons.OK, MessageBoxIcon.Error);
            //    Environment.Exit(0);
            //}
            //System.Threading.Thread.Sleep(500); 

            //currentPort = new SerialPort("COM5", 9600);
            //currentPort.BaudRate = 9600;
            //currentPort.DtrEnable = true;
            //currentPort.ReadTimeout = 3000;
            //try
            //{
            //    currentPort.Open();
            //}
            //catch (Exception e2)
            //{
            //    MessageBox.Show("Ошибка при подключении к COM порту", "Ошибка",
            //        MessageBoxButtons.OK, MessageBoxIcon.Error);
            //    Environment.Exit(0);
            //}

            //aTimer = new System.Timers.Timer(1000);
            //aTimer.Elapsed += OnTimedEvent;
            //aTimer.AutoReset = true;
            //aTimer.Enabled = true;
        }

        private void Form1_Load(object sender, EventArgs e)
        {
            //FormBorderStyle = FormBorderStyle.None;
            //WindowState = FormWindowState.Maximized;
            
            LoadTestFromFile();
            RandomTest();
        }

        private void Form1_Shown(object sender, EventArgs e)
        {
            Init();
        }

        private void lblPortData_Click(object sender, EventArgs e)
        {

        }
    }
}
